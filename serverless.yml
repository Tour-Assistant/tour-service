# NOTE: update this with your service name
service: tour-service

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables
  - serverless-pseudo-parameters
  - serverless-domain-manager
  - serverless-export-env

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${self:custom.Region}
  environment:
    TOUR_SERVICE_TABLE_NAME: ${self:custom.TourServiceTable.name}
    REGION: ${self:custom.Region}
  iamRoleStatements:
    - ${file(iam/TourServiceTableIAM.yml):TourServiceTableIAM}
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  #environment:
  #  SAMPLE_ENV_VAR: ${env:SAMPLE_ENV_VAR}

functions:
  createTour:
    handler: src/handlers/createTour.handler
    events:
      - http:
          method: POST
          path: /tour
          cors: true
          authorizer: ${self:custom.authorizer}
  getTours:
    handler: src/handlers/getTours.handler
    events:
      - http:
          method: GET
          path: /tours
          cors: true
          # authorizer: ${self:custom.authorizer}
  getTour:
    handler: src/handlers/getTour.handler
    events:
      - http:
          method: GET
          path: /tour/{id}
          cors: true
          authorizer: ${self:custom.authorizer}
  getTourByFbIdentifier:
    handler: src/handlers/getTourByFbIdentifier.handler
    events:
      - http:
          method: GET
          path: /tour/fb-identifier/{fbIdentifier}
          cors: true
          authorizer: ${self:custom.authorizer}
  updateTour:
    handler: src/handlers/updateTour.handler
    events:
      - http:
          method: PATCH
          path: /tour/{id}
          cors: true
          authorizer: ${self:custom.authorizer}
  deleteTour:
    handler: src/handlers/deleteTour.handler
    events:
      - http:
          method: DELETE
          path: /tour/{id}
          cors: true
          authorizer: ${self:custom.authorizer}
  processTourExpiring:
    handler: src/handlers/processTourExpiring.handler
    events:
      - schedule: rate(12 hours)

resources:
  Resources:
    TourServiceTable: ${file(resources/TourServiceTable.yml):TourServiceTable}

custom:
  authorizer: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:tour-assistant-auth-service-${self:provider.stage}-auth
  Region: ap-south-1
  TourServiceTable:
    name: !Ref TourServiceTable
    arn: !GetAtt TourServiceTable.Arn
  domain:
    test: host-api-test.my-tour-assistant.com
    dev: tour-api-dev.my-tour-assistant.com
    prod: tour-api.my-tour-assistant.com
  customDomain:
    domainName: ${self:custom.domain.${opt:stage, 'dev'}}
    basePath: 'v1'
    stage: ${self:provider.stage}
    certificateName: my-tour-assistant.com
    createRoute53Record: true
